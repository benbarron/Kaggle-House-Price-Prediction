sqrt(mean((pred.log - obs.log)^2))
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0))
plot(seq.int(1,500), xgb.fit$evaluation_log$train_rmse)
pred <- predict(xgb.fit, x.test)
obs <- y.test
obs.log <- log(obs)
pred.log <- log(pred)
plot(pred, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
plot(seq.int(1,500), xgb.fit$evaluation_log$train_rmse)
pred <- predict(xgb.fit, x.test)
obs <- y.test
obs.log <- log(obs)
pred.log <- log(pred)
plot(pred, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
## train model using all of data
xgb.fit <- xgboost(data = as.matrix(train.hot[, 2:ncms]),
label = as.matrix(train.hot[, ncols]),
nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
#sub <- tibble(Id = pred.data$Id, SalePrice = predict(rf.fit, pred.data))
sub <- tibble(Id = pred.data$Id, SalePrice = predict(xgb.fit, pred.mat))
write.csv(sub, './sub5.csv', row.names = F)
sub
rm(list = ls())
setwd('~/Desktop/Kaggle_HousePrices')
library(tidyverse)
library(onehot)
train.data <- as_tibble(read.csv('./train.csv', stringsAsFactors = T, header = T))
pred.data <- as_tibble(read.csv('./test.csv', stringsAsFactors = T, header = T))
pred.data$SalePrice <- 0
pred.data$Prediction <- T
train.data$Prediction <- F
data <- rbind(train.data, pred.data)
data <- select(data, -c('PoolQC', 'Fence', 'MiscFeature', 'Alley', 'Utilities'))
data <- mutate(data, GarageQual = replace_na(GarageQual, 'TA'),
GarageCond = replace_na(GarageCond, 'TA'),
GarageType = replace_na(GarageType, 'Attchd'),
GarageYrBlt = replace_na(GarageYrBlt, 1980),
GarageFinish = replace_na(GarageFinish, 'Unf'),
FireplaceQu = replace_na(FireplaceQu, 'Gd'),
BsmtFinType2 = replace_na(BsmtFinType2, 'Unf'),
BsmtFinType1 = replace_na(BsmtFinType1, 'Unf'),
BsmtExposure = replace_na(BsmtExposure, 'No'),
MasVnrArea = replace_na(MasVnrArea, 103),
MasVnrType = replace_na(MasVnrType, 'None'),
LotFrontage = replace_na(LotFrontage, 70),
BsmtCond = replace_na(BsmtCond, 'TA'),
SaleType = replace_na(SaleType, 'WD'),
GarageArea = replace_na(GarageArea, 472),
Functional = replace_na(Functional, 'Typ'),
GarageCars = replace_na(GarageCars, 2),
BsmtHalfBath = replace_na(BsmtHalfBath, 0),
BsmtFullBath = replace_na(BsmtFullBath, 0),
BsmtFinSF1 = replace_na(BsmtFinSF1, 439),
BsmtFinSF2 = replace_na(BsmtFinSF2, 52),
BsmtUnfSF = replace_na(BsmtUnfSF, 554),
TotalBsmtSF = replace_na(TotalBsmtSF, 1046),
Exterior2nd = replace_na(Exterior2nd, 'VinylSd'),
BsmtQual = replace_na(BsmtQual, 'Gd'),
Exterior1st = replace_na(Exterior1st, 'VinylSd'),
MSZoning = replace_na(MSZoning, 'RL'),
Electrical = replace_na(Electrical, 'SBrkr'),
KitchenQual = replace_na(KitchenQual, 'TA'))
data <- select(data, -c('OverallCond', 'BsmtExposure', 'BsmtFinType1','WoodDeckSF','OpenPorchSF','Fireplaces'))
train.data <- filter(data, Prediction == F) %>% select(-c('Prediction'))
pred.data <- filter(data, Prediction == T) %>% select(-c('Prediction'))
set.seed(2345)
case.select <- sample(1:nrow(train.data), nrow(train.data)*0.8)
data.train <- train.data[case.select, ]
data.test <- train.data[-case.select, ]
## one hot encoded version of data
encoder <- onehot(data, max_levels = 30)
data.hot <- as_tibble(predict(encoder, data))
train.hot <- filter(data.hot, Prediction == F) %>% select(-c('Prediction'))
pred.hot <- filter(data.hot, Prediction == T) %>% select(-c('Prediction'))
train.hot
set.seed(2345)
ncols <- ncol(train.hot)
ncms <- ncols - 1
case.select <- sample(1:nrow(train.hot), nrow(train.hot)*0.8)
x.train <- as.matrix(train.hot[case.select, 2:ncms])
x.test <- as.matrix(train.hot[-case.select, 2:ncms])
y.train <- as.matrix(train.hot[case.select,  ncols])
y.test <- as.matrix(train.hot[-case.select, ncols])
pred.mat <- as.matrix(pred.hot[, 2:ncms])
set.seed(2345)
case.select <- sample(1:nrow(train.data), nrow(train.data)*0.8)
data.train <- train.data[case.select, ]
data.test <- train.data[-case.select, ]
## one hot encoded version of data
encoder <- onehot(data, max_levels = 30)
data.hot <- as_tibble(predict(encoder, data))
train.hot <- filter(data.hot, Prediction == F) %>% select(-c('Prediction'))
pred.hot <- filter(data.hot, Prediction == T) %>% select(-c('Prediction'))
ncols <- ncol(train.hot)
ncms <- ncols - 1
x.train <- as.matrix(train.hot[case.select, 2:ncms])
x.test <- as.matrix(train.hot[-case.select, 2:ncms])
y.train <- as.matrix(train.hot[case.select,  ncols])
y.test <- as.matrix(train.hot[-case.select, ncols])
pred.mat <- as.matrix(pred.hot[, 2:ncms])
dim(data.train)
library(randomForest)
rf.fit <- randomForest(SalePrice~., data = data.train[2:70], ntree = 500)
pred <- predict(rf.fit, data.test)
obs <- data.test$SalePrice
obs.log <- log(obs)
pred.log <- log(pred)
plot(pred, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
rf.pred <- predict(rf.fit, data.train)
library(xgboost)
xgb.fit <- xgboost(data = cbind(x.train, rf.pred), label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
pred <- predict(xgb.fit, cbind(x.test, predict(rf.fit, data.test)))
## fit the model
rf.fit <- randomForest(SalePrice~., data = data.train[2:70], ntree = 500)
xgb.fit <- xgboost(data = cbind(x.train, rf = predict(rf.fit, data.train)), label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
pred <- predict(xgb.fit, cbind(x.test, rf = predict(rf.fit, data.test)))
pred
obs <- y.test
obs.log <- log(obs)
pred.log <- log(pred)
plot(pred, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
plot(seq.int(1,500), xgb.fit$evaluation_log$train_rmse)
plot(pred, obs)
abline(0, 1, col = 'red')
rf.fit <- randomForest(SalePrice~., data = data.train[2:70], ntree = 500)
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test)
cbind(xgb.pred, rf.pred)
res <- tibble(xgb = xgb.pred, rf = rf.pred)
res$avg <- (res$xgb + res$rf) / 2
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
library(e1071)
rf.fit <- randomForest(SalePrice~., data = data.train[2:70,], ntree = 500)
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## fit the model
rf.fit <- randomForest(SalePrice~., data = data.train[,2:70], ntree = 500)
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred)
res$avg <- (res$xgb + res$rf) / 2
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
plot(seq.int(1,500), xgb.fit$evaluation_log$train_rmse)
svm.fit <- svm(SalePrice~., data = data.train[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
svm.pred <- predict(svm.fit, data.test[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
library(MASS)
library(glmnet)
lasso.fit <- glmnet(x.train, y.train, family="gaussian", alpha=1)
ridge.fit <- glmnet(x.train, y.train, family="gaussian", alpha=0)
elnet.fit <- glmnet(x.train, y.train, family="gaussian", alpha=.5)
lasso.pred <- predict(lasso.fit, x.test)
ridge.pred <- predict(ridge.fit, x.test)
elnet.pred <- predict(elnet.fit, x.test)
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred,
lasso = lasso.pred, ridge = ridge.pred,
elnet = elnet.pred)
res$avg <- (res$xgb + res$rf + res$svm + res$lasso + res$ridge + res$elnet) / 6
elnet.pred
dim(lasso.pred)
dim(x.test)
nrow(x.test)
nrow(lasso.pred)
colnames(lasso.pred)
lasso.pred[,86]
attributes(lasso.pred)
lasso.pred[1]
lasso.pred[1,]
lasso.fit <- cv.glmnet(x.train, y.train, family="gaussian", alpha=1)
ridge.fit <- cv.glmnet(x.train, y.train, family="gaussian", alpha=0)
elnet.fit <- cv.glmnet(x.train, y.train, family="gaussian", alpha=.5)
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
svm.pred <- predict(svm.fit, data.test[,2:70])
lasso.pred <- predict(lasso.fit, x.test)
ridge.pred <- predict(ridge.fit, x.test)
elnet.pred <- predict(elnet.fit, x.test)
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred,
lasso = lasso.pred, ridge = ridge.pred,
elnet = elnet.pred)
res$avg <- (res$xgb + res$rf + res$svm + res$lasso + res$ridge + res$elnet) / 6
res$avg
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
plot(ridge.pred, obs)
abline(0,1)
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
plot(seq.int(1,500), xgb.fit$evaluation_log$train_rmse)
dim(train.data)
## train model using all of data
xgb.fit <- xgboost(data = as.matrix(train.hot[, 2:ncms]),label = as.matrix(train.hot[, ncols]),
nrounds = 500, params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
rf.fit <- randomForest(SalePrice~., data = train.data[,2:70], ntree = 500)
svm.fit <- svm(SalePrice~., data = train.data[,2:70])
dim(pred.data)
xgb.pred <- predict(xgb.fit, pred.mat)
rf.pred <- predict(rf.fit, pred.data[,2:70])
svm.pred <- predict(svm.fit, pred.data[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
#sub <- tibble(Id = pred.data$Id, SalePrice = predict(rf.fit, pred.data))
sub <- tibble(Id = pred.data$Id, SalePrice = res$avg)
write.csv(sub, './sub6.csv', row.names = F)
sub
rf.fit <- randomForest(SalePrice~., data = data.train[,2:70], ntree = 500)
svm.fit <- svm(SalePrice~., data = data.train[,2:70])
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
svm.pred <- predict(svm.fit, data.test[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
obs <- y.test
obs.log <- log(obs)
pred.log <- log(res$avg)
plot(res$avg, obs)
abline(0, 1, col = 'red')
mean(abs(pred - obs))
sqrt(mean((pred - obs)^2))
sqrt(mean((pred.log - obs.log)^2))
boxplot(data$SalePrice)
w <- boxplot(data$SalePrice)
w$group
w$out
plot(res$avg, obs)
abline(0, 1, col = 'red')
w$n
w$group
w$names
w$conf
w$stats
w$stats[5]
w$stats[5,]
w$stats[5]
boxplot(data$SalePrice)$stats[5]
y.train < boxplot(data$SalePrice)$stats[5]
which(y.train < boxplot(data$SalePrice)$stats[5])
x.test <- x.train[which(y.test < boxplot(data$SalePrice)$stats[5]),]
boxplot(data$SalePrice)$stats[5]
x.train <- x.train[which(y.train < boxplot(data$SalePrice)$stats[5]),]
x.test <- x.train[which(y.test < boxplot(data$SalePrice)$stats[5]),]
boxplot(data$SalePrice)$stats[5]
boxplot(y.train)
y.train <- y.train[which(y.train < boxplot(data$SalePrice)$stats[5])]
y.test <- y.train[which(y.test < boxplot(data$SalePrice)$stats[5])]
boxplot(y.train)
rf.fit <- randomForest(SalePrice~., data = data.train[,2:70], ntree = 500)
svm.fit <- svm(SalePrice~., data = data.train[,2:70])
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
svm.pred <- predict(svm.fit, data.test[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
svm.pred <- predict(svm.fit, data.test[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
train.data <- as_tibble(read.csv('./train.csv', stringsAsFactors = T, header = T))
pred.data <- as_tibble(read.csv('./test.csv', stringsAsFactors = T, header = T))
pred.data$SalePrice <- 0
pred.data$Prediction <- T
train.data$Prediction <- F
data <- rbind(train.data, pred.data)
data <- select(data, -c('PoolQC', 'Fence', 'MiscFeature', 'Alley', 'Utilities'))
data <- mutate(data, GarageQual = replace_na(GarageQual, 'TA'),
GarageCond = replace_na(GarageCond, 'TA'),
GarageType = replace_na(GarageType, 'Attchd'),
GarageYrBlt = replace_na(GarageYrBlt, 1980),
GarageFinish = replace_na(GarageFinish, 'Unf'),
FireplaceQu = replace_na(FireplaceQu, 'Gd'),
BsmtFinType2 = replace_na(BsmtFinType2, 'Unf'),
BsmtFinType1 = replace_na(BsmtFinType1, 'Unf'),
BsmtExposure = replace_na(BsmtExposure, 'No'),
MasVnrArea = replace_na(MasVnrArea, 103),
MasVnrType = replace_na(MasVnrType, 'None'),
LotFrontage = replace_na(LotFrontage, 70),
BsmtCond = replace_na(BsmtCond, 'TA'),
SaleType = replace_na(SaleType, 'WD'),
GarageArea = replace_na(GarageArea, 472),
Functional = replace_na(Functional, 'Typ'),
GarageCars = replace_na(GarageCars, 2),
BsmtHalfBath = replace_na(BsmtHalfBath, 0),
BsmtFullBath = replace_na(BsmtFullBath, 0),
BsmtFinSF1 = replace_na(BsmtFinSF1, 439),
BsmtFinSF2 = replace_na(BsmtFinSF2, 52),
BsmtUnfSF = replace_na(BsmtUnfSF, 554),
TotalBsmtSF = replace_na(TotalBsmtSF, 1046),
Exterior2nd = replace_na(Exterior2nd, 'VinylSd'),
BsmtQual = replace_na(BsmtQual, 'Gd'),
Exterior1st = replace_na(Exterior1st, 'VinylSd'),
MSZoning = replace_na(MSZoning, 'RL'),
Electrical = replace_na(Electrical, 'SBrkr'),
KitchenQual = replace_na(KitchenQual, 'TA'))
data <- select(data, -c('OverallCond', 'BsmtExposure', 'BsmtFinType1','WoodDeckSF','OpenPorchSF','Fireplaces'))
train.data <- filter(data, Prediction == F) %>% select(-c('Prediction'))
pred.data <- filter(data, Prediction == T) %>% select(-c('Prediction'))
set.seed(2345)
case.select <- sample(1:nrow(train.data), nrow(train.data)*0.8)
data.train <- train.data[case.select, ]
data.test <- train.data[-case.select, ]
## one hot encoded version of data
encoder <- onehot(data, max_levels = 30)
data.hot <- as_tibble(predict(encoder, data))
train.hot <- filter(data.hot, Prediction == F) %>% select(-c('Prediction'))
pred.hot <- filter(data.hot, Prediction == T) %>% select(-c('Prediction'))
ncols <- ncol(train.hot)
ncms <- ncols - 1
x.train <- as.matrix(train.hot[case.select, 2:ncms])
x.test <- as.matrix(train.hot[-case.select, 2:ncms])
y.train <- as.matrix(train.hot[case.select,  ncols])
y.test <- as.matrix(train.hot[-case.select, ncols])
pred.mat <- as.matrix(pred.hot[, 2:ncms])
rf.fit <- randomForest(SalePrice~., data = data.train[,2:70], ntree = 500)
svm.fit <- svm(SalePrice~., data = data.train[,2:70])
xgb.fit <- xgboost(data = x.train, label = y.train, nrounds = 500,
params = list(max_depth = 2, eta = 0.05, lambda = 0.15))
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
svm.pred <- predict(svm.fit, data.test[,2:70])
res <- tibble(xgb = xgb.pred, rf = rf.pred, svm = svm.pred)
res$avg <- (res$xgb + res$rf + res$svm) / 3
data.test
train.data <- as_tibble(read.csv('./train.csv', stringsAsFactors = T, header = T))
pred.data <- as_tibble(read.csv('./test.csv', stringsAsFactors = T, header = T))
pred.data$SalePrice <- 0
pred.data$Prediction <- T
train.data$Prediction <- F
data <- rbind(train.data, pred.data)
data <- select(data, -c('PoolQC', 'Fence', 'MiscFeature', 'Alley', 'Utilities'))
data <- mutate(data, GarageQual = replace_na(GarageQual, 'TA'),
GarageCond = replace_na(GarageCond, 'TA'),
GarageType = replace_na(GarageType, 'Attchd'),
GarageYrBlt = replace_na(GarageYrBlt, 1980),
GarageFinish = replace_na(GarageFinish, 'Unf'),
FireplaceQu = replace_na(FireplaceQu, 'Gd'),
BsmtFinType2 = replace_na(BsmtFinType2, 'Unf'),
BsmtFinType1 = replace_na(BsmtFinType1, 'Unf'),
BsmtExposure = replace_na(BsmtExposure, 'No'),
MasVnrArea = replace_na(MasVnrArea, 103),
MasVnrType = replace_na(MasVnrType, 'None'),
LotFrontage = replace_na(LotFrontage, 70),
BsmtCond = replace_na(BsmtCond, 'TA'),
SaleType = replace_na(SaleType, 'WD'),
GarageArea = replace_na(GarageArea, 472),
Functional = replace_na(Functional, 'Typ'),
GarageCars = replace_na(GarageCars, 2),
BsmtHalfBath = replace_na(BsmtHalfBath, 0),
BsmtFullBath = replace_na(BsmtFullBath, 0),
BsmtFinSF1 = replace_na(BsmtFinSF1, 439),
BsmtFinSF2 = replace_na(BsmtFinSF2, 52),
BsmtUnfSF = replace_na(BsmtUnfSF, 554),
TotalBsmtSF = replace_na(TotalBsmtSF, 1046),
Exterior2nd = replace_na(Exterior2nd, 'VinylSd'),
BsmtQual = replace_na(BsmtQual, 'Gd'),
Exterior1st = replace_na(Exterior1st, 'VinylSd'),
MSZoning = replace_na(MSZoning, 'RL'),
Electrical = replace_na(Electrical, 'SBrkr'),
KitchenQual = replace_na(KitchenQual, 'TA'))
data <- select(data, -c('OverallCond', 'BsmtExposure', 'BsmtFinType1','WoodDeckSF','OpenPorchSF','Fireplaces'))
train.data <- filter(data, Prediction == F) %>% select(-c('Prediction'))
pred.data <- filter(data, Prediction == T) %>% select(-c('Prediction'))
set.seed(2345)
case.select <- sample(1:nrow(train.data), nrow(train.data)*0.8)
data.train <- train.data[case.select, ]
data.test <- train.data[-case.select, ]
## one hot encoded version of data
encoder <- onehot(data, max_levels = 30)
data.hot <- as_tibble(predict(encoder, data))
train.hot <- filter(data.hot, Prediction == F) %>% select(-c('Prediction'))
pred.hot <- filter(data.hot, Prediction == T) %>% select(-c('Prediction'))
ncols <- ncol(train.hot)
ncms <- ncols - 1
x.train <- as.matrix(train.hot[case.select, 2:ncms])
x.test <- as.matrix(train.hot[-case.select, 2:ncms])
y.train <- as.matrix(train.hot[case.select,  ncols])
y.test <- as.matrix(train.hot[-case.select, ncols])
pred.mat <- as.matrix(pred.hot[, 2:ncms])
## test the model
xgb.pred <- predict(xgb.fit, x.test)
rf.pred <- predict(rf.fit, data.test[,2:70])
train.data <- as_tibble(read.csv('./train.csv', stringsAsFactors = T, header = T))
pred.data <- as_tibble(read.csv('./test.csv', stringsAsFactors = T, header = T))
data.train
train.data <- as_tibble(read.csv('./train.csv', stringsAsFactors = T, header = T))
pred.data <- as_tibble(read.csv('./test.csv', stringsAsFactors = T, header = T))
pred.data$SalePrice <- 0
pred.data$Prediction <- T
train.data$Prediction <- F
data <- rbind(train.data, pred.data)
data <- select(data, -c('PoolQC', 'Fence', 'MiscFeature', 'Alley', 'Utilities'))
data <- mutate(data, GarageQual = replace_na(GarageQual, 'TA'),
GarageCond = replace_na(GarageCond, 'TA'),
GarageType = replace_na(GarageType, 'Attchd'),
GarageYrBlt = replace_na(GarageYrBlt, 1980),
GarageFinish = replace_na(GarageFinish, 'Unf'),
FireplaceQu = replace_na(FireplaceQu, 'Gd'),
BsmtFinType2 = replace_na(BsmtFinType2, 'Unf'),
BsmtFinType1 = replace_na(BsmtFinType1, 'Unf'),
BsmtExposure = replace_na(BsmtExposure, 'No'),
MasVnrArea = replace_na(MasVnrArea, 103),
MasVnrType = replace_na(MasVnrType, 'None'),
LotFrontage = replace_na(LotFrontage, 70),
BsmtCond = replace_na(BsmtCond, 'TA'),
SaleType = replace_na(SaleType, 'WD'),
GarageArea = replace_na(GarageArea, 472),
Functional = replace_na(Functional, 'Typ'),
GarageCars = replace_na(GarageCars, 2),
BsmtHalfBath = replace_na(BsmtHalfBath, 0),
BsmtFullBath = replace_na(BsmtFullBath, 0),
BsmtFinSF1 = replace_na(BsmtFinSF1, 439),
BsmtFinSF2 = replace_na(BsmtFinSF2, 52),
BsmtUnfSF = replace_na(BsmtUnfSF, 554),
TotalBsmtSF = replace_na(TotalBsmtSF, 1046),
Exterior2nd = replace_na(Exterior2nd, 'VinylSd'),
BsmtQual = replace_na(BsmtQual, 'Gd'),
Exterior1st = replace_na(Exterior1st, 'VinylSd'),
MSZoning = replace_na(MSZoning, 'RL'),
Electrical = replace_na(Electrical, 'SBrkr'),
KitchenQual = replace_na(KitchenQual, 'TA'))
